{"version":3,"sources":["Todo.js","Todoform.js","Todolist.js","App.js","reportWebVitals.js","index.js"],"names":["props","style","display","justifyContent","textDecoration","complete","onClick","toggleComplete","console","log","text","onDelete","Todolist","state","handelChange","event","setState","target","name","value","handleSubmit","preventDefault","onSubmit","id","shortid","generate","this","placeholder","onChange","required","Component","todos","ShowList","toggleAllComplete","addTodo","todo","map","updateShowTodo","s","handleDeleteTodo","filter","DeleteAllCompleteTodo","Todo","length","some","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAEe,WAAAA,GAAK,OACA,sBAAKC,MAAO,CAACC,QAAQ,OAAOC,eAAe,UAA3C,UACI,sBACAF,MAAO,CAACG,eAAgBJ,EAAMK,SAAS,eAAe,IACtDC,QAASN,EAAMO,eAFf,UAGKC,QAAQC,IAAIT,EAAMO,gBAClBP,EAAMU,QAEX,wBAAQJ,QAASN,EAAMW,SAAvB,eACKH,QAAQC,IAAIT,EAAMW,c,wBCR1BC,E,4MACjBC,MAAM,CACFH,KAAK,I,EAETI,aAAa,SAACC,GACV,EAAKC,SAAL,eACKD,EAAME,OAAOC,KAAMH,EAAME,OAAOE,S,EAGzCC,aAAa,SAACL,GACVA,EAAMM,iBACN,EAAKrB,MAAMsB,SAAS,CAChBC,GAAGC,IAAQC,WACXf,KAAK,EAAKG,MAAMH,KAChBL,UAAS,IAEb,EAAKW,SAAS,CACVN,KAAK,M,4CAGb,WACI,OACI,8BACI,uBAAMY,SAAUI,KAAKN,aAArB,UACI,uBACID,MAAOO,KAAKb,MAAMH,KAClBiB,YAAY,WACZT,KAAK,OACLU,SAAUF,KAAKZ,aACfe,UAAQ,IAEZ,wBAAQvB,QAASoB,KAAKN,aAAtB,gC,GA/BkBU,aCCjBlB,E,4MACjBC,MAAM,CACFkB,MAAM,GACNC,SAAS,MACTC,mBAAkB,G,EAEtBC,QAAQ,SAACC,GACL,EAAKnB,SAAS,CACVe,MAAM,CAACI,GAAF,mBAAW,EAAKtB,MAAMkB,W,EAGnCxB,eAAe,SAACgB,GACZ,EAAKP,SAAS,CACVe,MAAM,EAAKlB,MAAMkB,MAAMK,KAAI,SAAAD,GACvB,OAAGA,EAAKZ,KAAOA,EACJ,2BACAY,GADP,IAEI9B,UAAU,EAAKA,WAIZ8B,Q,EAMvBE,eAAe,SAACC,GACZ,EAAKtB,SAAS,CACVgB,SAASM,K,EAGjBC,iBAAiB,SAAChB,GACd,EAAKP,SAAS,CACVe,MAAO,EAAKlB,MAAMkB,MAAMS,QAAO,SAAAL,GAAI,OAAKA,EAAKZ,KAAQA,Q,EAI7DkB,sBAAsB,SAAClB,GACnB,EAAKP,SAAS,CACVe,MAAO,EAAKlB,MAAMkB,MAAMS,QAAO,SAAAL,GAAI,OAAMA,EAAK9B,e,4CAGtD,WAAU,IAAD,OACD0B,EAAM,GAWV,MATyB,QAAtBL,KAAKb,MAAMmB,SACVD,EAAML,KAAKb,MAAMkB,MAEW,WAAxBL,KAAKb,MAAMmB,SACjBD,EAAOL,KAAKb,MAAMkB,MAAMS,QAAO,SAAAL,GAAI,OAAGA,EAAK9B,YAEb,aAAxBqB,KAAKb,MAAMmB,WACfD,EAAML,KAAKb,MAAMkB,MAAMS,QAAO,SAAAL,GAAI,OAAEA,EAAK9B,aAIzC,gCACE,cAAC,EAAD,CAAUiB,SAAUI,KAAKQ,UACzBH,EAAMK,KAAI,SAAAD,GAAI,OACX,cAACO,EAAD,CAEArC,SAAU8B,EAAK9B,SACfE,eAAgB,kBAAM,EAAKA,eAAe4B,EAAKZ,KAC/CZ,SAAU,kBAAM,EAAK4B,iBAAiBJ,EAAKZ,KAC3Cb,KAAMyB,EAAKzB,KACXyB,KAAMA,GALDA,EAAKZ,OAQd,+CAAkBG,KAAKb,MAAMkB,MAAMS,QAAO,SAAAL,GAAI,OAAGA,EAAK9B,YAAUsC,UAChE,wBAAQrC,QAAS,kBAAI,EAAK+B,eAAe,QAAzC,iBACA,wBAAQ/B,QAAS,kBAAI,EAAK+B,eAAe,WAAzC,oBACA,wBAAQ/B,QAAS,kBAAI,EAAK+B,eAAe,aAAzC,sBACCX,KAAKb,MAAMkB,MAAMa,MAAK,SAAAT,GAAI,OAAEA,EAAK9B,YAAW,8BACzC,wBAAQC,QAASoB,KAAKe,sBAAtB,yCACI,KACR,8BACI,yBAAQnC,QAAS,kBACd,EAAKU,SAAS,CACVe,MAAM,EAAKlB,MAAMkB,MAAMK,KAAI,SAAAD,GAAI,kCACxBA,GADwB,IAE3B9B,SAAS,EAAKQ,MAAMoB,uBAExBA,mBAAmB,EAAKpB,MAAMoB,qBANrC,6CAOiCP,KAAKb,MAAMoB,+B,GApFvBH,aCDjBe,E,4JACnB,WACE,OACE,8BACE,cAAC,EAAD,U,GAJyBf,aCSlBgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.360eb3f3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default props => (\r\n                    <div style={{display:'flex',justifyContent:'center'}}>\r\n                        <div\r\n                        style={{textDecoration: props.complete?\"line-through\":\"\"}}\r\n                        onClick={props.toggleComplete}>\r\n                            {console.log(props.toggleComplete)}\r\n                            {props.text}\r\n                        </div>\r\n                        <button onClick={props.onDelete}>x</button>\r\n                            {console.log(props.onDelete)}\r\n                    </div>\r\n);","import React, { Component } from 'react';\r\nimport shortid from 'shortid';\r\n\r\nexport default class Todolist extends Component {\r\n    state={\r\n        text:'',\r\n    }\r\n    handelChange=(event)=>{\r\n        this.setState({\r\n            [event.target.name]:event.target.value\r\n        })\r\n    }\r\n    handleSubmit=(event)=>{\r\n        event.preventDefault();\r\n        this.props.onSubmit({\r\n            id:shortid.generate(),\r\n            text:this.state.text,\r\n            complete:false\r\n        });\r\n        this.setState({\r\n            text:''\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input\r\n                        value={this.state.text}\r\n                        placeholder=\"todos...\"\r\n                        name=\"text\"\r\n                        onChange={this.handelChange}\r\n                        required\r\n                    />\r\n                    <button onClick={this.handleSubmit}>Add Todos</button>\r\n                 </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Todo from './Todo';\r\nimport Todoform from './Todoform'\r\n\r\nexport default class Todolist extends Component {\r\n    state={\r\n        todos:[],\r\n        ShowList:\"all\",\r\n        toggleAllComplete:true\r\n    }\r\n    addTodo=(todo)=>{\r\n        this.setState({\r\n            todos:[todo, ...this.state.todos]\r\n        })\r\n    }\r\n    toggleComplete=(id)=>{\r\n        this.setState({\r\n            todos:this.state.todos.map(todo =>{\r\n                if(todo.id === id){\r\n                    return {\r\n                        ...todo,\r\n                        complete:!this.complete\r\n                    }\r\n                }\r\n                else{\r\n                    return todo;\r\n                }\r\n            })\r\n\r\n        })\r\n    }\r\n    updateShowTodo=(s)=>{\r\n        this.setState({\r\n            ShowList:s\r\n        })\r\n    };\r\n    handleDeleteTodo=(id)=>{\r\n        this.setState({\r\n            todos: this.state.todos.filter(todo =>  todo.id  !== id) \r\n        })\r\n    }\r\n\r\n    DeleteAllCompleteTodo=(id)=>{\r\n        this.setState({\r\n            todos: this.state.todos.filter(todo =>  !todo.complete) \r\n        })\r\n    }\r\n    render() {\r\n        let todos=[]\r\n\r\n        if(this.state.ShowList==='all'){\r\n            todos=this.state.todos;\r\n        }\r\n        else if(this.state.ShowList === 'active') {\r\n          todos= this.state.todos.filter(todo=>!todo.complete)\r\n        }\r\n        else if(this.state.ShowList === 'complete') {\r\n            todos=this.state.todos.filter(todo=>todo.complete)\r\n    }\r\n        return (\r\n            \r\n            <div>\r\n              <Todoform onSubmit={this.addTodo}/>\r\n             {todos.map(todo =>(\r\n                 <Todo\r\n                 key={todo.id}\r\n                 complete={todo.complete}\r\n                 toggleComplete={() => this.toggleComplete(todo.id)}\r\n                 onDelete={() => this.handleDeleteTodo(todo.id)}\r\n                 text={todo.text}\r\n                 todo={todo}/>\r\n                 \r\n             ))}\r\n             <div>todos left :{this.state.todos.filter(todo=>!todo.complete).length}</div>\r\n             <button onClick={()=>this.updateShowTodo(\"all\")}>all</button>\r\n             <button onClick={()=>this.updateShowTodo(\"active\")}>active</button>\r\n             <button onClick={()=>this.updateShowTodo(\"complete\")}>complete</button>\r\n             {this.state.todos.some(todo=>todo.complete)?(<div>\r\n                 <button onClick={this.DeleteAllCompleteTodo}>Remove all complete todos</button>\r\n             </div>):null}\r\n             <div>\r\n                 <button onClick={()=>\r\n                    this.setState({\r\n                        todos:this.state.todos.map(todo=>({\r\n                            ...todo,\r\n                            complete:this.state.toggleAllComplete\r\n                        })),\r\n                        toggleAllComplete:!this.state.toggleAllComplete\r\n                    })}>toggle all complete : {`${this.state.toggleAllComplete}`}</button>\r\n             </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport Todolist from './Todolist';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <Todolist/>\n      </div>\n    )\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}